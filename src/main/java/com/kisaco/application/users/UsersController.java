package com.kisaco.application.users;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.mindrot.jbcrypt.BCrypt;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.rest.webmvc.BasePathAwareController;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

@BasePathAwareController // This means that this class is a Controller
@RequestMapping(path = "/api/users") // This means URL's start with /user (after Application path)
public class UsersController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UsersRepository usersRepository;

    @PostMapping(path = "/signup") // Map ONLY POST Requests
    public @ResponseBody
    Users addNewUser(@RequestParam String name, @RequestParam String email, @RequestParam String password) {

        String hashed = BCrypt.hashpw(password, BCrypt.gensalt());
        Users n = new Users();
        n.setName(name);
        n.setEmail(email);
        n.setCreatedAt(System.currentTimeMillis() / 1000L);
        n.setPassword(hashed);
        try {
            n = usersRepository.save(n);
        } catch (DataIntegrityViolationException e) {
            throw new ResponseStatusException(
                    HttpStatus.BAD_REQUEST, "Could not signed up.");
        }
        return n;
    }

    @PostMapping(path = "/login") // Map ONLY POST Requests
    public @ResponseBody
    Users loginUser(@RequestParam String email, @RequestParam String password) {
        Users n = usersRepository.findByEmail(email);
        ObjectMapper mapper = new ObjectMapper();
        if (n == null) {
            throw new ResponseStatusException(
                    HttpStatus.NOT_FOUND, "User not found.");
        } else {
            if (BCrypt.checkpw(password, n.getPassword())) {
                return n;
            } else
                throw new ResponseStatusException(
                        HttpStatus.BAD_REQUEST, "Invalid password.");
        }
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<Users> getAllUsers() {
        // This returns a JSON or XML with the users
        return usersRepository.findAll();
    }
}